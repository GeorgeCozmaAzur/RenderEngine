#version 450

#extension GL_GOOGLE_include_directive : enable
#include "common.glsl"

#define COMPUTE_GROUP_SIZE 8
#define COMPUTE_GROUP_SIZE_Z 1
#define EPSILON 0.0001f


layout (local_size_x = COMPUTE_GROUP_SIZE, local_size_y = COMPUTE_GROUP_SIZE, local_size_z = COMPUTE_GROUP_SIZE_Z) in;
layout (binding = 0) uniform sampler2D sampleShadow;
layout (binding = 1) uniform sampler2D sampleShadowColor;
layout (binding = 2) uniform sampler2DArray s_BlueNoise;
layout (binding = 3) uniform sampler3D s_History;

layout (binding = 4) uniform UBO 
{
	mat4  view;
    mat4  projection;
	mat4  inv_view_proj;
	mat4  prev_view_proj;
	mat4  light_view_proj;
	vec4  camera_position;
	vec4  bias_near_far_pow;
	vec4  light_color;
	float time;
	int noise_index;
} ubo;

layout (binding = 5, rgba16) uniform image3D resultImage;



float sample_blue_noise(ivec3 coord)
{
    ivec2 noise_coord = (coord.xy + ivec2(0, 1) * coord.z * BLUE_NOISE_TEXTURE_SIZE) % BLUE_NOISE_TEXTURE_SIZE;
    return texelFetch(s_BlueNoise, ivec3(noise_coord, ubo.noise_index), 0).r;
}

float textureProj(vec4 shadowCoord, vec2 off)
{
	float shadow = 1.0;
	float ambient = 0.0;
	if ( shadowCoord.z > -1.0 && shadowCoord.z < 1.0 ) 
	{
		float dist = texture( sampleShadow, shadowCoord.st + off ).r;
		
		if ( shadowCoord.w > 0.0 && dist < shadowCoord.z ) 
		{
			shadow = ambient;
		}
	}
	return shadow;
}

vec3 textureProjColor(vec4 shadowCoord, vec2 off)
{
	float shadow = 1.0;
	float ambient = 0.0;
	vec3 shadowColor = vec3(1.0);
	if ( shadowCoord.z > -1.0 && shadowCoord.z < 1.0 ) 
	{
		float dist = texture( sampleShadow, shadowCoord.st + off ).r;
		shadowColor = texture( sampleShadowColor, shadowCoord.st + off ).rgb;
		if ( shadowCoord.w > 0.0 && dist < shadowCoord.z ) 
		{
			shadow = ambient;
		}
		shadowColor *= shadow;
	}
	return shadowColor;
}

float sample_shadow_map(vec2 coord, float z)
{
    float current_depth = z;
    float bias = ubo.bias_near_far_pow.x;

    //return texture(inputImage, vec3(coord, current_depth - bias));
    return texture(sampleShadow, coord).r;
}

const mat4 biasMat = mat4( 
	0.5, 0.0, 0.0, 0.0,
	0.0, 0.5, 0.0, 0.0,
	0.0, 0.0, 1.0, 0.0,
	0.5, 0.5, 0.0, 1.0 );
	
float visibility(vec3 p)
{
    // Transform frag position into Light-space.
    vec4 light_space_pos = biasMat * ubo.light_view_proj * vec4(p, 1.0);

    // Perspective divide
    vec4 proj_coords = light_space_pos / light_space_pos.w;

    //return sample_shadow_map(proj_coords.xy, proj_coords.z);
	return textureProj(proj_coords, vec2(0.0));
}
vec3 visibilityColor(vec3 p)
{
    // Transform frag position into Light-space.
    vec4 light_space_pos = biasMat * ubo.light_view_proj * vec4(p, 1.0);

    // Perspective divide
    vec4 proj_coords = light_space_pos / light_space_pos.w;

    //return sample_shadow_map(proj_coords.xy, proj_coords.z);
	return textureProjColor(proj_coords, vec2(0.0));
}

void main()
{	
    vec2 xy_float = vec2(float(gl_GlobalInvocationID.x) / 256.0, float(gl_GlobalInvocationID.y) / 256.0);
	
	ivec3 coord = ivec3(gl_GlobalInvocationID.xyz);
	
	float jitter = (sample_blue_noise(coord) - 0.5f) * 0.999f;
	
	//vec3 world_pos = id_to_world(coord, ubo.bias_near_far_pow.y, ubo.bias_near_far_pow.z, ubo.bias_near_far_pow.w, ubo.inv_view_proj);
	vec3 world_pos = id_to_world_with_jitter(coord, jitter, ubo.bias_near_far_pow.y, ubo.bias_near_far_pow.z, ubo.bias_near_far_pow.w, ubo.inv_view_proj);
	
	vec3 Wo = normalize(ubo.camera_position.xyz - world_pos);

	float density    = 5.0;
	vec3 lighting = vec3(0.1);
	
	vec3 visibility_value = visibilityColor(world_pos);

    lighting += visibility_value;
	vec4 color_and_density = vec4(lighting * density, density);
	
	vec3 world_pos_without_jitter = id_to_world(coord, ubo.bias_near_far_pow.y, ubo.bias_near_far_pow.z, ubo.bias_near_far_pow.w, ubo.inv_view_proj);                

	// Find the history UV
	vec3 history_uv = world_to_uv(world_pos_without_jitter, ubo.bias_near_far_pow.y, ubo.bias_near_far_pow.z, ubo.bias_near_far_pow.w, ubo.prev_view_proj);

	// If history UV is outside the frustum, skip history
	if (all(greaterThanEqual(history_uv, vec3(0.0f))) && all(lessThanEqual(history_uv, vec3(1.0f))))
	{
		// Fetch history sample
		vec4 history = textureLod(s_History, history_uv, 0.0f);

		color_and_density = mix(history, color_and_density, 0.05f);
	}
	
	imageStore(resultImage, coord, color_and_density);
	
}
