#version 450

struct Particle {
	vec4 pos;
	vec4 vel;
	vec4 normal;
	vec4 uv;
};

layout(std430, binding = 0) buffer ParticleIn {
	Particle particleIn[ ];
};

layout(std430, binding = 1) buffer ParticleOut {
	Particle particleOut[ ];
};

layout (local_size_x = 10, local_size_y = 10) in;

layout (binding = 2) uniform UBO 
{
	float deltaT;
	float particleMass;
	float springStiffness;
	float damping;
	float restDistanceH;
	float restDistanceV;
	float restDistanceD;
	float shearing;
	vec4 externalForce;
	vec4 pinnedCorners;
	vec2 projectionSizes;
	ivec2 particleCount;
} params;

layout (binding = 3) uniform sampler2D sampleShadow;


vec3 springForce(vec3 p0, vec3 p1, float restDist) 
{
	vec3 dist = p0 - p1;
	return normalize(dist) * params.springStiffness * (length(dist) - restDist);
}

vec3 sampleBuffer(uvec2 uv)
{
	uint index = uv.y * params.particleCount.x + uv.x;
	return particleIn[index].pos.xyz;
}

void main() 
{
	uvec3 id = gl_GlobalInvocationID; 

	uint index = id.y * params.particleCount.x + id.x;
	if (index > params.particleCount.x * params.particleCount.y) 
		return;

	if( (id.y==0 && id.x==0 && params.pinnedCorners.x==1) ||
		(id.y==0 && id.x==(params.particleCount.x-1) && params.pinnedCorners.y==1) ||
		(id.y==(params.particleCount.y-1) && id.x==0 && params.pinnedCorners.z==1) ||
		(id.y==(params.particleCount.y-1) && id.x==(params.particleCount.x-1) && params.pinnedCorners.w==1) )
	{
		particleOut[index].pos = particleOut[index].pos;
		particleOut[index].vel = vec4(0.0);
		return;
	}

	vec3 gravityforce = params.externalForce.xyz * params.particleMass;
	vec3 force = vec3(0.0);

	vec3 pos = particleIn[index].pos.xyz;
	vec3 vel = particleIn[index].vel.xyz;

	for (int i=-1; i<2; i++) 
	{   
		if( (i<0 && id.x == 0) || (i>0 && id.x == params.particleCount.x - 1) )
			continue;
		
		for(int j=-1; j<2; j++) 
		{ 	
			if( (j<0 && id.y == 0) || (j>0 && id.y == params.particleCount.y - 1) )
				continue;
			
				float restResistance = (j==0) ? params.restDistanceH : (i==0 ? params.restDistanceV : params.restDistanceD );
				if(!(i==0 && j==0))
					force += springForce(sampleBuffer(uvec2(id.x+i, id.y+j)), pos, restResistance);
		}
	}

	force += (-params.damping * vel);

	vec3 f = (force + gravityforce) * (1.0 / params.particleMass);
	particleOut[index].pos = vec4(pos + vel * params.deltaT, 1.0);
	particleOut[index].vel = vec4(vel + f * params.deltaT, 0.0);

	//scene collision
	vec2 xzpos = particleOut[index].pos.xz * params.projectionSizes.x;
	xzpos = xzpos * 0.5 + 0.5;
	float dist = (1.0-texture( sampleShadow, xzpos ).r) * params.projectionSizes.y;
	
	if (-particleOut[index].pos.y < (dist+0.08)) 
	{
		particleOut[index].vel = vec4(0.0);
	}
	
	//compute normals
	vec3 normal = vec3(0.0);
	vec3 a, b, c, d;
	
	if (id.x > 0)
		a = particleIn[index - 1].pos.xyz - pos;

	if (id.y > 0)
		b = particleIn[index - params.particleCount.x].pos.xyz - pos;

	if (id.x < params.particleCount.x - 1)
		c = particleIn[index + 1].pos.xyz - pos;

	if (id.y < params.particleCount.y - 1)
		d = particleIn[index + params.particleCount.x].pos.xyz - pos;

	
	if(id.x > 0 && id.y > 0)
		normal += cross(a,b);

	if (id.y > 0 && id.x < params.particleCount.x - 1)
		normal += cross(b,c);
	
	if (id.x < params.particleCount.x - 1 && id.y < params.particleCount.y - 1)
		normal += cross(c,d);

	if (id.y < params.particleCount.y - 1 && id.x > 0)
		normal += cross(d,a);

	particleOut[index].normal = vec4(normalize(-normal), 0.0f);	
	
}